<Project>
    <PropertyGroup Label="Tailwind.Hosting Properties">
        <TailwindVersion Condition="'$(TailwindVersion)' == ''">latest</TailwindVersion>
        <TailwindWatch Condition="'$(TailwindWatch)' == ''">true</TailwindWatch>
        <TailwindMinifyOnPublish Condition="'$(TailwindMinifyOnPublish)' == '' AND '$(Configuration)' == 'Release'">true</TailwindMinifyOnPublish>
        <TailwindExcludeInputFileOnPublish Condition="'$(TailwindExcludeInputFileOnPublish)' == ''">true</TailwindExcludeInputFileOnPublish>

        <TailwindInputCssFile Condition="'$(TailwindInputCssFile)' == ''">wwwroot/styles.css</TailwindInputCssFile>
        <TailwindOutputCssFile Condition="'$(TailwindOutputCssFile)' == ''">wwwroot/app.css</TailwindOutputCssFile>
        <TailwindConfigFile Condition="'$(TailwindConfigFile)' == ''">tailwind.config.js</TailwindConfigFile>

        <_TailwindExecutableFolder>$(MSBuildProjectDirectory)/$(OutputPath)</_TailwindExecutableFolder>
        <_TailwindConfig>$(OutputPath)tailwind.props.json</_TailwindConfig>
    </PropertyGroup>

    <PropertyGroup Label="Tailwind.Hosting DependsOn">
        <PrepareForBuildDependsOn>
            TailwindSetupExecutable;
            TailwindPrepareForGenerateOutput;
            TailwindGenerateOutput;
            $(PrepareForBuildDependsOn);
        </PrepareForBuildDependsOn>

        <TailwindSetupExecutableDependsOn>
            $(SetupExecutableDependsOn)
            GetTargetPath;
        </TailwindSetupExecutableDependsOn>

        <TailwindGenerateOutputDependsOn>
            $(TailwindGenerateOutputDependsOn)
            TailwindSetupExecutable;
            TailwindPrepareForGenerateOutput;
        </TailwindGenerateOutputDependsOn>

        <TailwindWriteHostingConfigDependsOn>
            $(WriteHostingConfigDependsOn)
            TailwindSetupExecutable;
        </TailwindWriteHostingConfigDependsOn>
    </PropertyGroup>

    <!--Download Tailwindcss executable-->
    <Target Name="TailwindSetupExecutable"
            BeforeTargets="PrepareForBuild"
            DependsOnTargets="$(TailwindSetupExecutableDependsOn)"
            Condition="!Exists('$(_TailwindExecutablePath)')">
        <SetupExecutableTask
                TailwindExecutableFolder="$(_TailwindExecutableFolder)"
                TailwindVersion="$(TailwindVersion)" >
            <Output TaskParameter="TailwindExecutablePath" PropertyName="_TailwindExecutablePath"/>
        </SetupExecutableTask>

        <ItemGroup>
            <Content
                    Include="$(_TailwindExecutablePath)"
                    CopyToOutputDirectory="PreserveNewest"
                    CopyToPublishDirectory="Never" />
        </ItemGroup>
    </Target>

    <!-- Ensures that cached output files are removed -->
    <Target Name="TailwindPrepareForGenerateOutput" BeforeTargets="PrepareForBuild">
        <ItemGroup>
            <Content Remove="$(TailwindOutputCssFile)"/>
        </ItemGroup>
    </Target>

    <!-- Generates tailwind output on build-->
    <Target Name="TailwindGenerateOutput"
            AfterTargets="TailwindPrepareForGenerateOutput"
            Condition="Exists('$(_TailwindExecutablePath)')"
            DependsOnTargets="$(TailwindGenerateOutputDependsOn)">
        <PropertyGroup Label="Generation Properties">
            <_TailwindBaseWorkingDirectory>$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(TailwindWorkingDirectory)'))</_TailwindBaseWorkingDirectory>
            <_TailwindWorkingDirectory>$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(TailwindWorkingDirectory)'))</_TailwindWorkingDirectory>
            <_TailwindExecutablePath>$([System.IO.Path]::Combine('$(_TailwindExecutablePath)'))</_TailwindExecutablePath>
            <_TailwindInputCssFile>$([System.IO.Path]::Combine('$(_TailwindBaseWorkingDirectory)', '$(TailwindInputCssFile)'))</_TailwindInputCssFile>
            <_TailwindOutputCssFile>$([System.IO.Path]::Combine('$(_TailwindBaseWorkingDirectory)', '$(TailwindOutputCssFile)'))</_TailwindOutputCssFile>
            <_TailwindTailwindConfigFile>$([System.IO.Path]::Combine('$(_TailwindBaseWorkingDirectory)', '$(TailwindConfigFile)'))</_TailwindTailwindConfigFile>

            <_TailwindGenerateCommand>$(_TailwindExecutablePath) -c $(_TailwindTailwindConfigFile) -i $(_TailwindInputCssFile) -o $(_TailwindOutputCssFile)</_TailwindGenerateCommand>
            <_TailwindGenerateCommand Condition="'$(Configuration)' == 'Release' AND '$(TailwindMinifyOnPublish)' == 'true'">
                $(_TailwindGenerateCommand) --minify
            </_TailwindGenerateCommand>
        </PropertyGroup>
        <Exec Command="$(_TailwindGenerateCommand)" WorkingDirectory="$(_TailwindBaseWorkingDirectory)"/>
        <!-- Includes the generated file to project references
         NOTE(kallebysantos): For .NET 9+ we need to make sure that this file is included before 'ResolveStaticWebAssetsInputs'
         -->
        <ItemGroup>
            <Content Include="$(TailwindOutputCssFile)"
                     CopyToPublishDirectory="Always"/>
        </ItemGroup>
    </Target>


    <ItemGroup Condition="'$(TailwindExcludeInputFileOnPublish)' == 'true'">
        <Content Remove="$(TailwindInputCssFile)" CopyToPublishDirectory="Never"/>
        <None Remove="$(TailwindInputCssFile)" CopyToPublishDirectory="Never"/>
    </ItemGroup>

    <!--Create Tailwind.Hosting configuration file-->
    <Target Name="TailwindWriteHostingConfig"
            AfterTargets="Build"
            DependsOnTargets="$(TailwindWriteHostingConfigDependsOn)">
        <PropertyGroup Label="Tailwind.Hosting Json Config File Properties">
            <_TailwindBaseWorkingDirectory>$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(TailwindWorkingDirectory)'))</_TailwindBaseWorkingDirectory>
            <_TailwindWorkingDirectory>$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(TailwindWorkingDirectory)').Replace('\','\\'))</_TailwindWorkingDirectory>
            <_TailwindExecutablePath>$([System.IO.Path]::Combine('$(_TailwindExecutablePath)').Replace('\','\\'))</_TailwindExecutablePath>
            <_TailwindInputCssFile>$([System.IO.Path]::Combine('$(_TailwindBaseWorkingDirectory)', '$(TailwindInputCssFile)').Replace('\','\\'))</_TailwindInputCssFile>
            <_TailwindOutputCssFile>$([System.IO.Path]::Combine('$(_TailwindBaseWorkingDirectory)', '$(TailwindOutputCssFile)').Replace('\','\\'))</_TailwindOutputCssFile>
            <_TailwindTailwindConfigFile>$([System.IO.Path]::Combine('$(_TailwindBaseWorkingDirectory)', '$(TailwindConfigFile)').Replace('\','\\'))</_TailwindTailwindConfigFile>
        </PropertyGroup>

        <ItemGroup>
            <_TailwindConfigLines Include="{"/>
            <_TailwindConfigLines Include="&quot;TailwindProps&quot;:{"/>
            <_TailwindConfigLines Include="&quot;ExecutablePath&quot;:&quot;$(_TailwindExecutablePath)&quot;,"/>
            <_TailwindConfigLines Include="&quot;IsWatchEnabled&quot;:&quot;$(TailwindWatch)&quot;,"/>
            <_TailwindConfigLines Include="&quot;WorkingDirectory&quot;:&quot;$(_TailwindWorkingDirectory)&quot;,"/>
            <_TailwindConfigLines Include="&quot;InputCssFile&quot;:&quot;$(_TailwindInputCssFile)&quot;,"/>
            <_TailwindConfigLines Include="&quot;OutputCssFile&quot;:&quot;$(_TailwindOutputCssFile)&quot;,"/>
            <_TailwindConfigLines Include="&quot;ConfigFile&quot;:&quot;$(_TailwindTailwindConfigFile)&quot;"/>
            <_TailwindConfigLines Include="  }"/>
            <_TailwindConfigLines Include="}"/>
        </ItemGroup>

        <WriteLinesToFile File="$(_TailwindConfig)" Lines="@(_TailwindConfigLines)" WriteOnlyWhenDifferent="true" Overwrite="true"/>

        <ItemGroup>
            <ContentWithTargetPath Include="$(_TailwindConfig)" CopyToOutputDirectory="PreserveNewest" CopyToPublishDirectory="Never" TargetPath="tailwind.props.json"/>
            <FileWrites Include="$(_TailwindConfig)"/>
            <Message Text="Writing Tailwind config file $(_TailwindConfig)" Importance="high"/>
        </ItemGroup>
    </Target>

    <!--The generated file is deleted after a general clean. It will force the regeneration on rebuild-->
    <Target Name="_TailwindClean" AfterTargets="Clean">
        <ItemGroup>
            <TailwindFilesToDelete Include="$(OutputPath)tailwind*"/>
        </ItemGroup>
        <Delete Files="@(TailwindFilesToDelete)"/>
    </Target>
</Project>
